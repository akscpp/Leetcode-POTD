Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.
Example 1:

Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].
Example 2:

Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Constraints:

1 <= nums.length <= 10^4
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.
 

Follow up: Squaring each element and sorting the new array is very trivial, could you find an O(n) solution using a different approach?



class Solution {
public:
    // vector<int> sortedSquares(vector<int>& nums) {
    //     int n = nums.size();
    //     if(n==1) return {nums[0]*nums[0]};
    //     // for(int i=0;i<n;i++){
    //     //     nums[i]=nums[i]*nums[i];
    //     // }
    //     // int x = *max_element(nums.begin(),nums.end());
    //     // vector<int>arr(x+1,0);

    //     // for(int i=0;i<n;i++){
    //     //     arr[nums[i]]++;
    //     // }
    //     // vector<int>ans;                                                          //TLE
    //     // for(int i=0;i<=x;i++){
    //     //     if(arr[i]!=0){
    //     //        while(arr[i]!=0){
    //     //            ans.push_back(i);
    //     //            arr[i]--;
    //     //        }
    //     //     }
    //     // }
    //     vector<int>ans;
    //     // for(int i=0;i<n;i++){
    //     //     ans.push_back(nums[i]);
    //     // }
    //     // sort(ans.begin(),ans.end());
    //     int i=0;
    //     while(nums[i]<0 && i<n){
    //         i++;
    //     }
    //     i--;
    //     int j = n-1;
    //     while(nums[j]>=0 && j>=0){
    //         j--;
    //     }
    //     j++;
        
    //     while(i>=0 && j<n){
    //         if(abs(nums[i])>=nums[j]){
    //             ans.push_back(nums[j]*nums[j]);
    //             j++;
    //         }else{
    //             ans.push_back(nums[i]*nums[i]);
    //             i--;
    //         }
    //     }

    //     while(i>=0){
    //         ans.push_back(nums[i]*nums[i]);
    //             i--;
    //     }

    //     while(j<n){
    //         ans.push_back(nums[j]*nums[j]);
    //             j++;
    //     }

    //     return ans;
    // }
    vector<int> sortedSquares(vector<int>& nums) {
    int n = nums.size();
    vector<int> ans(n, 0); // Initialize the result vector with size n

    int i = 0;
    while (i < n && nums[i] < 0) {
        i++;
    }

    int j = i;
    i--;

    int k = 0;
    while (i >= 0 && j < n) {
        if (abs(nums[i]) <= nums[j]) {
            ans[k++] = nums[i] * nums[i];
            i--;
        } else {
            ans[k++] = nums[j] * nums[j];
            j++;
        }
    }

    while (i >= 0) {
        ans[k++] = nums[i] * nums[i];
        i--;
    }

    while (j < n) {
        ans[k++] = nums[j] * nums[j];
        j++;
    }

    return ans;
}

};
