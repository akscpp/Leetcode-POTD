Given the root of a binary tree, return the leftmost value in the last row of the tree.

 

Example 1:


Input: root = [2,1,3]
Output: 1
Example 2:


Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-231 <= Node.val <= 231 - 1






/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        // if(root==NULL) return NULL;
        // int ans;
        // if(root->left==NULL && root->right==NULL) return root->val;
        // queue<TreeNode*>q;
        // q.push(root);
        // while(!q.empty()){
        //     int count=q.size();
        //     for(int i=0;i<count;i++){
        //         TreeNode* curr = q.front();
        //         q.pop();
        //         if(curr->left!=NULL) q.push(curr->left);
        //         if(curr->right!=NULL) q.push(curr->right);
        //         if(i==0){
        //             ans=curr->val;
        //         }

        //     }
        // }
        // return ans;
        int ans;
        if(root->left==NULL && root->right==NULL) return root->val;
        queue<TreeNode*>q;
        q.push(root);
        while(!q.empty()){
            TreeNode* curr = q.front();
            q.pop();
            ans=curr->val;
            if(curr->right) q.push(curr->right);
            if(curr->left) q.push(curr->left);

        }
        return ans;
    }
};
